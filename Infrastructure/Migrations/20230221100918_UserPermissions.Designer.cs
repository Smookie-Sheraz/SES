// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    [Migration("20230221100918_UserPermissions")]
    partial class UserPermissions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsWorkBook")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceBook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceBookPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResourceNoteBookId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("BookId")
                        .HasName("PK_Book");

                    b.HasIndex("GradeId");

                    b.HasIndex("ResourceNoteBookId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Setup_Book", (string)null);
                });

            modelBuilder.Entity("Entities.Models.BookAllocation", b =>
                {
                    b.Property<int>("BookAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookAllocationId"), 1L, 1);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<bool>("preExist")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("BookAllocationId")
                        .HasName("PK_BookAllocation");

                    b.HasIndex("BookId");

                    b.HasIndex("SectionId");

                    b.ToTable("Setup_BookAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Campus", b =>
                {
                    b.Property<int>("CampusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampusId"), 1L, 1);

                    b.Property<string>("Abbrevation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CampusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrincipalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CampusId")
                        .HasName("PK_Campus");

                    b.HasIndex("SchoolId");

                    b.ToTable("Setup_Campus", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"), 1L, 1);

                    b.Property<string>("ChapterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("EndPage")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAllocated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("SLO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StartPage")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("ChapterId")
                        .HasName("PK_Chapter");

                    b.HasIndex("UnitId");

                    b.ToTable("Chapter", (string)null);
                });

            modelBuilder.Entity("Entities.Models.ChapterAllocation", b =>
                {
                    b.Property<int>("ChapterAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterAllocationId"), 1L, 1);

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TermId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookEndPage")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookStartPage")
                        .HasColumnType("int");

                    b.HasKey("ChapterAllocationId")
                        .HasName("PK_ChapterAllocation");

                    b.HasIndex("ChapterId");

                    b.HasIndex("TermId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WorkBookId");

                    b.ToTable("ChapterAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.ChapterAnswers", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"), 1L, 1);

                    b.Property<string>("Choice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsTrue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("AnswerId")
                        .HasName("PK_ChapterAnswers");

                    b.HasIndex("QuestionId");

                    b.ToTable("ChapterAnswers", (string)null);
                });

            modelBuilder.Entity("Entities.Models.ChapterQuestions", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"), 1L, 1);

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId")
                        .HasName("PK_ChapterQuestions");

                    b.HasIndex("ChapterId");

                    b.ToTable("ChapterQuestions", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentHeadId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ShortDescripiton")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId")
                        .HasName("PK_Department");

                    b.HasIndex("DepartmentHeadId");

                    b.ToTable("Setup_Department", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Designation", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesignationId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DesignationId")
                        .HasName("PK_Designation");

                    b.ToTable("Setup_Designation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CNICExpiryDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CNICIssueDate")
                        .HasColumnType("date");

                    b.Property<string>("CNICNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("date");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndofPeriodDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndofProbationDate")
                        .HasColumnType("date");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldOfSpecialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("date");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Period")
                        .HasColumnType("int");

                    b.Property<int?>("ProbationPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolSectionId")
                        .HasColumnType("int");

                    b.Property<string>("SpouseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartofPeriodDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartofProbationDate")
                        .HasColumnType("date");

                    b.Property<int?>("SubDepartmentHeadSubDepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("SubDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("UserImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId")
                        .HasName("PK_Employee");

                    b.HasIndex("CampusId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("GenderId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolSectionId");

                    b.HasIndex("SubDepartmentHeadSubDepartmentId");

                    b.HasIndex("SubDepartmentId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"), 1L, 1);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("WGender")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId")
                        .HasName("PK_Gender");

                    b.ToTable("Setup_Gender", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<string>("GradeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("SchoolSectionId")
                        .HasColumnType("int");

                    b.HasKey("GradeId")
                        .HasName("PK_Grade");

                    b.HasIndex("SchoolSectionId");

                    b.ToTable("Setup_Grade", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Head", b =>
                {
                    b.Property<int>("HeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HeadId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ShooraId")
                        .HasColumnType("int");

                    b.HasKey("HeadId")
                        .HasName("PK_Head");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShooraId");

                    b.ToTable("Setup_Head", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Holiday", b =>
                {
                    b.Property<int>("HolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HolidayId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("HolidayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NoOfHolidays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TermId")
                        .HasColumnType("int");

                    b.HasKey("HolidayId")
                        .HasName("PK_Holiday");

                    b.HasIndex("TermId");

                    b.ToTable("Holidays", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Permissions", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("PermissionDbName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionId")
                        .HasName("PK_Permissions");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("Entities.Models.ResourceNoteBook", b =>
                {
                    b.Property<int>("ResourceNoteBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceNoteBookId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("NoteBookName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("ResourceNoteBookId")
                        .HasName("PK_ResourceNoteBook");

                    b.ToTable("ResourceNoteBook", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("RollName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId")
                        .HasName("PK_Role");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Entities.Models.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolId"), 1L, 1);

                    b.Property<string>("Abbrevation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegistrationNo")
                        .HasColumnType("int");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolId")
                        .HasName("PK_School");

                    b.ToTable("Setup_School", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SchoolSection", b =>
                {
                    b.Property<int>("SchoolSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolSectionId"), 1L, 1);

                    b.Property<string>("Abbrevation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("SectionHead")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolSectionId")
                        .HasName("PK_SchoolSection");

                    b.HasIndex("CampusId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Setup_SchoolSection", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SectionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionId")
                        .HasName("PK_Section");

                    b.HasIndex("GradeId");

                    b.ToTable("Setup_Section", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Shoora", b =>
                {
                    b.Property<int>("ShooraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShooraId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CNICExpiryDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CNICIssueDate")
                        .HasColumnType("date");

                    b.Property<string>("CNICNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CampdusId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("SpouseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShooraId")
                        .HasName("PK_Shoora");

                    b.HasIndex("CampdusId");

                    b.HasIndex("GenderId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Shoora", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SubDepartment", b =>
                {
                    b.Property<int>("SubDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubDepartmentId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HeadId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("MainDepartmentId")
                        .HasColumnType("int");

                    b.HasKey("SubDepartmentId")
                        .HasName("PK_SubDepartment");

                    b.HasIndex("HeadId");

                    b.HasIndex("MainDepartmentId");

                    b.ToTable("Setup_SubDepartment", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId")
                        .HasName("PK_Subject");

                    b.ToTable("Setup_Subject", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SubjectAllocation", b =>
                {
                    b.Property<int>("SubjectAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectAllocationId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("SubjectAllocationId")
                        .HasName("PK_SubjectAllocation");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SubjectTeacherAllocation", b =>
                {
                    b.Property<int>("SubjectTeacherAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectTeacherAllocationId"), 1L, 1);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("SubjectTeacherAllocationId")
                        .HasName("PK_SubjectTeacherAllocation");

                    b.HasIndex("BookId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SectionId");

                    b.ToTable("SubjectTeacherAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SubTopic", b =>
                {
                    b.Property<int>("SubTopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubTopicId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("EndPage")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("StartPage")
                        .HasColumnType("int");

                    b.Property<string>("SubTopicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("SubTopicId")
                        .HasName("PK_SubTopic");

                    b.HasIndex("TopicId");

                    b.ToTable("SubTopic", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SubTopicAllocation", b =>
                {
                    b.Property<int>("SubTopicAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubTopicAllocationId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAllocated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("SubTopicId")
                        .HasColumnType("int");

                    b.Property<int?>("TermId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookEndPage")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookStartPage")
                        .HasColumnType("int");

                    b.HasKey("SubTopicAllocationId")
                        .HasName("PK_SubTopicAllocation");

                    b.HasIndex("SubTopicId");

                    b.HasIndex("TermId");

                    b.HasIndex("TopicId");

                    b.HasIndex("WorkBookId");

                    b.ToTable("SubTopicAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.TeachingMethodology", b =>
                {
                    b.Property<int>("TeachingMethodologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeachingMethodologyId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TMethodologyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeachingMethodologyId")
                        .HasName("PK_TeachingMethodology");

                    b.ToTable("TeachingMethodology", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Term", b =>
                {
                    b.Property<int>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TermId"), 1L, 1);

                    b.Property<int?>("AssesmentDays")
                        .HasColumnType("int");

                    b.Property<int?>("AssesmentWiseTermDays")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TermHolidays")
                        .HasColumnType("int");

                    b.Property<string>("TermName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalDays")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSatSun")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSchoolDays")
                        .HasColumnType("int");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("TermId")
                        .HasName("PK_Term");

                    b.HasIndex("YearId");

                    b.ToTable("Setup_Term", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"), 1L, 1);

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("EndPage")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("StartPage")
                        .HasColumnType("int");

                    b.Property<string>("TopicName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicId")
                        .HasName("PK_Topic");

                    b.HasIndex("ChapterId");

                    b.ToTable("Topic", (string)null);
                });

            modelBuilder.Entity("Entities.Models.TopicAllocation", b =>
                {
                    b.Property<int>("TopicAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicAllocationId"), 1L, 1);

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAllocated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("TMethodDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeachingMethodologyId")
                        .HasColumnType("int");

                    b.Property<int?>("TermId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookEndPage")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookStartPage")
                        .HasColumnType("int");

                    b.HasKey("TopicAllocationId")
                        .HasName("PK_TopicAllocation");

                    b.HasIndex("ChapterId");

                    b.HasIndex("TeachingMethodologyId");

                    b.HasIndex("TermId");

                    b.HasIndex("TopicId");

                    b.HasIndex("WorkBookId");

                    b.ToTable("TopicAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"), 1L, 1);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("EndPage")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAllocated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("SLO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StartPage")
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitId")
                        .HasName("PK_Unit");

                    b.HasIndex("BookId");

                    b.ToTable("Unit", (string)null);
                });

            modelBuilder.Entity("Entities.Models.UnitAllocation", b =>
                {
                    b.Property<int>("UnitAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitAllocationId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TermId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookEndPage")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookStartPage")
                        .HasColumnType("int");

                    b.HasKey("UnitAllocationId")
                        .HasName("PK_UnitAllocation");

                    b.HasIndex("TermId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WorkBookId");

                    b.ToTable("UnitAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId")
                        .HasName("PK_User");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Entities.Models.UserPermissions", b =>
                {
                    b.Property<int>("UserPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPermissionId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserPermissionId")
                        .HasName("PK_UserPermissions");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserPermissions", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Year", b =>
                {
                    b.Property<int>("YearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YearId"), 1L, 1);

                    b.Property<int?>("AssesmentDays")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("Holidays")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsLeapYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TotalAssesWiseSchoolDays")
                        .HasColumnType("int");

                    b.Property<int?>("TotalDays")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSatSundays")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSchoolDays")
                        .HasColumnType("int");

                    b.Property<string>("YearName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("YearId")
                        .HasName("PK_Year");

                    b.ToTable("Setup_Year", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.HasOne("Entities.Models.Grade", "Grade")
                        .WithMany("Books")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Book_GradeId");

                    b.HasOne("Entities.Models.ResourceNoteBook", "ResourceNoteBook")
                        .WithMany("Books")
                        .HasForeignKey("ResourceNoteBookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Book_ResourceNoteBookId");

                    b.HasOne("Entities.Models.Subject", "Subject")
                        .WithMany("Books")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Book_SubjectId");

                    b.Navigation("Grade");

                    b.Navigation("ResourceNoteBook");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Entities.Models.BookAllocation", b =>
                {
                    b.HasOne("Entities.Models.Book", "Book")
                        .WithMany("BookAllocations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_BookAllocation_BookId");

                    b.HasOne("Entities.Models.Section", "Section")
                        .WithMany("BookAllocations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_BookAllocation_SectionId");

                    b.Navigation("Book");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Entities.Models.Campus", b =>
                {
                    b.HasOne("Entities.Models.School", "School")
                        .WithMany("campuses")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Campus_ShoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Entities.Models.Chapter", b =>
                {
                    b.HasOne("Entities.Models.Unit", "Unit")
                        .WithMany("Chapters")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Chapter_UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Entities.Models.ChapterAllocation", b =>
                {
                    b.HasOne("Entities.Models.Chapter", "Chapter")
                        .WithMany("ChapterAllocations")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ChapterAllocation_ChapterId");

                    b.HasOne("Entities.Models.Term", "Term")
                        .WithMany("ChapterAllocations")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ChapterAllocation_TermId");

                    b.HasOne("Entities.Models.Unit", "Unit")
                        .WithMany("ChapterAllocations")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ChapterAllocation_UnitId");

                    b.HasOne("Entities.Models.Book", "WorkBook")
                        .WithMany("ChapterAllocations")
                        .HasForeignKey("WorkBookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ChapterAllocation_WorkBookId");

                    b.Navigation("Chapter");

                    b.Navigation("Term");

                    b.Navigation("Unit");

                    b.Navigation("WorkBook");
                });

            modelBuilder.Entity("Entities.Models.ChapterAnswers", b =>
                {
                    b.HasOne("Entities.Models.ChapterQuestions", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ChapterAnswers_QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Entities.Models.ChapterQuestions", b =>
                {
                    b.HasOne("Entities.Models.Chapter", "Chapter")
                        .WithMany("ChapterQuestions")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ChapterQuestions_ChapterId");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Entities.Models.Department", b =>
                {
                    b.HasOne("Entities.Models.Shoora", "Shoora")
                        .WithMany("Departments")
                        .HasForeignKey("DepartmentHeadId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Department_ShooraId");

                    b.Navigation("Shoora");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.HasOne("Entities.Models.Campus", "Campus")
                        .WithMany("Employees")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_CampusId");

                    b.HasOne("Entities.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_DepartmentId");

                    b.HasOne("Entities.Models.Designation", "Designation")
                        .WithMany("Employees")
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_DesignationId");

                    b.HasOne("Entities.Models.Gender", "Gender")
                        .WithMany("Employees")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_GenderId");

                    b.HasOne("Entities.Models.Roles", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_RoleId");

                    b.HasOne("Entities.Models.School", "School")
                        .WithMany("Employees")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_SchoolId");

                    b.HasOne("Entities.Models.SchoolSection", "SchoolSection")
                        .WithMany("Employees")
                        .HasForeignKey("SchoolSectionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_SchoolSectionId");

                    b.HasOne("Entities.Models.SubDepartment", "SubDepartmentHead")
                        .WithMany()
                        .HasForeignKey("SubDepartmentHeadSubDepartmentId");

                    b.HasOne("Entities.Models.SubDepartment", "SubDepartment")
                        .WithMany("Employees")
                        .HasForeignKey("SubDepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_SubDepartmentId");

                    b.Navigation("Campus");

                    b.Navigation("Department");

                    b.Navigation("Designation");

                    b.Navigation("Gender");

                    b.Navigation("Role");

                    b.Navigation("School");

                    b.Navigation("SchoolSection");

                    b.Navigation("SubDepartment");

                    b.Navigation("SubDepartmentHead");
                });

            modelBuilder.Entity("Entities.Models.Grade", b =>
                {
                    b.HasOne("Entities.Models.SchoolSection", "SchoolSection")
                        .WithMany("Grades")
                        .HasForeignKey("SchoolSectionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Grade_SchoolSectionId");

                    b.Navigation("SchoolSection");
                });

            modelBuilder.Entity("Entities.Models.Head", b =>
                {
                    b.HasOne("Entities.Models.Employee", "Employee")
                        .WithMany("Heads")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Head_EmployeeId");

                    b.HasOne("Entities.Models.Shoora", "Shoora")
                        .WithMany("Heads")
                        .HasForeignKey("ShooraId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Head_ShooraId");

                    b.Navigation("Employee");

                    b.Navigation("Shoora");
                });

            modelBuilder.Entity("Entities.Models.Holiday", b =>
                {
                    b.HasOne("Entities.Models.Term", "Term")
                        .WithMany("Holidays")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Holidays_TermId");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Entities.Models.SchoolSection", b =>
                {
                    b.HasOne("Entities.Models.Campus", "Campus")
                        .WithMany("sections")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SchoolSection_CampusId");

                    b.HasOne("Entities.Models.School", "School")
                        .WithMany("SchoolSections")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SchoolSection_SchoolId");

                    b.Navigation("Campus");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Entities.Models.Section", b =>
                {
                    b.HasOne("Entities.Models.Grade", "Grade")
                        .WithMany("Sections")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Section_GradeId");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("Entities.Models.Shoora", b =>
                {
                    b.HasOne("Entities.Models.Campus", "Campus")
                        .WithMany("Shooras")
                        .HasForeignKey("CampdusId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Shoora_CampusId");

                    b.HasOne("Entities.Models.Gender", "Gender")
                        .WithMany("Shooras")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Shoora_GenderId");

                    b.HasOne("Entities.Models.School", "School")
                        .WithMany("Shooras")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Shoora_SchoolId");

                    b.Navigation("Campus");

                    b.Navigation("Gender");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Entities.Models.SubDepartment", b =>
                {
                    b.HasOne("Entities.Models.Head", "Head")
                        .WithMany("subDepartments")
                        .HasForeignKey("HeadId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubDepartment_HeadId");

                    b.HasOne("Entities.Models.Department", "MainDepartment")
                        .WithMany("SubDepartments")
                        .HasForeignKey("MainDepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Subdepartment_DepartmentId");

                    b.Navigation("Head");

                    b.Navigation("MainDepartment");
                });

            modelBuilder.Entity("Entities.Models.SubjectAllocation", b =>
                {
                    b.HasOne("Entities.Models.Section", "Section")
                        .WithMany("SubjectAllocations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubjectAllocation_SectionId");

                    b.HasOne("Entities.Models.Subject", "Subject")
                        .WithMany("SubjectAllocations")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubjectAllocation_SubjectId");

                    b.Navigation("Section");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Entities.Models.SubjectTeacherAllocation", b =>
                {
                    b.HasOne("Entities.Models.Book", "Book")
                        .WithMany("SubjectTeacherAllocations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubjectTeacherAllocation_BookId");

                    b.HasOne("Entities.Models.Employee", "Employee")
                        .WithMany("SubjectTeacherAllocations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubjectTeacherAllocation_EmployeeId");

                    b.HasOne("Entities.Models.Section", "Section")
                        .WithMany("SubjectTeacherAllocations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubjectTeacherAllocation_SectionId");

                    b.Navigation("Book");

                    b.Navigation("Employee");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Entities.Models.SubTopic", b =>
                {
                    b.HasOne("Entities.Models.Topic", "Topic")
                        .WithMany("SubTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubTopic_TopicId");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Entities.Models.SubTopicAllocation", b =>
                {
                    b.HasOne("Entities.Models.SubTopic", "SubTopic")
                        .WithMany("SubTopicAllocations")
                        .HasForeignKey("SubTopicId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubTopicAllocation_SubTopicId");

                    b.HasOne("Entities.Models.Term", "Term")
                        .WithMany("SubTopicAllocations")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubTopicAllocation_TermId");

                    b.HasOne("Entities.Models.Topic", "Topic")
                        .WithMany("SubTopicAllocations")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubTopicAllocation_TopicId");

                    b.HasOne("Entities.Models.Book", "WorkBook")
                        .WithMany("SubTopicAllocations")
                        .HasForeignKey("WorkBookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubTopicAllocation_WorkBookId");

                    b.Navigation("SubTopic");

                    b.Navigation("Term");

                    b.Navigation("Topic");

                    b.Navigation("WorkBook");
                });

            modelBuilder.Entity("Entities.Models.Term", b =>
                {
                    b.HasOne("Entities.Models.Year", "Year")
                        .WithMany("Terms")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Term_YearId");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Entities.Models.Topic", b =>
                {
                    b.HasOne("Entities.Models.Chapter", "Chapter")
                        .WithMany("Topics")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Topic_ChapterId");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Entities.Models.TopicAllocation", b =>
                {
                    b.HasOne("Entities.Models.Chapter", "Chapter")
                        .WithMany("TopicAllocations")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TopicAllocation_ChapterId");

                    b.HasOne("Entities.Models.TeachingMethodology", "TeachingMethodology")
                        .WithMany("TopicAllocations")
                        .HasForeignKey("TeachingMethodologyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TopicAllocation_TeachingMethodologyId");

                    b.HasOne("Entities.Models.Term", "Term")
                        .WithMany("TopicAllocations")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TopicAllocation_TermId");

                    b.HasOne("Entities.Models.Topic", "Topic")
                        .WithMany("TopicAllocations")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TopicAllocation_TopicId");

                    b.HasOne("Entities.Models.Book", "WorkBook")
                        .WithMany("TopicAllocations")
                        .HasForeignKey("WorkBookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TopicAllocation_WorkBookId");

                    b.Navigation("Chapter");

                    b.Navigation("TeachingMethodology");

                    b.Navigation("Term");

                    b.Navigation("Topic");

                    b.Navigation("WorkBook");
                });

            modelBuilder.Entity("Entities.Models.Unit", b =>
                {
                    b.HasOne("Entities.Models.Book", "Book")
                        .WithMany("Units")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Unit_BookId");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Entities.Models.UnitAllocation", b =>
                {
                    b.HasOne("Entities.Models.Term", "Term")
                        .WithMany("UnitAllocations")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UnitAllocation_TermId");

                    b.HasOne("Entities.Models.Unit", "Unit")
                        .WithMany("UnitAllocations")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UnitAllocation_UnitId");

                    b.HasOne("Entities.Models.Book", "WorkBook")
                        .WithMany("unitAllocations")
                        .HasForeignKey("WorkBookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UnitAllocation_WorkBookId");

                    b.Navigation("Term");

                    b.Navigation("Unit");

                    b.Navigation("WorkBook");
                });

            modelBuilder.Entity("Entities.Models.UserPermissions", b =>
                {
                    b.HasOne("Entities.Models.Permissions", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserPermissions_PermissionId");

                    b.HasOne("Entities.Models.Roles", "Role")
                        .WithMany("UserPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserPermissions_RoleId");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.Navigation("BookAllocations");

                    b.Navigation("ChapterAllocations");

                    b.Navigation("SubTopicAllocations");

                    b.Navigation("SubjectTeacherAllocations");

                    b.Navigation("TopicAllocations");

                    b.Navigation("Units");

                    b.Navigation("unitAllocations");
                });

            modelBuilder.Entity("Entities.Models.Campus", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Shooras");

                    b.Navigation("sections");
                });

            modelBuilder.Entity("Entities.Models.Chapter", b =>
                {
                    b.Navigation("ChapterAllocations");

                    b.Navigation("ChapterQuestions");

                    b.Navigation("TopicAllocations");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Entities.Models.ChapterQuestions", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Entities.Models.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("SubDepartments");
                });

            modelBuilder.Entity("Entities.Models.Designation", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.Navigation("Heads");

                    b.Navigation("SubjectTeacherAllocations");
                });

            modelBuilder.Entity("Entities.Models.Gender", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Shooras");
                });

            modelBuilder.Entity("Entities.Models.Grade", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Entities.Models.Head", b =>
                {
                    b.Navigation("subDepartments");
                });

            modelBuilder.Entity("Entities.Models.Permissions", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Entities.Models.ResourceNoteBook", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Entities.Models.Roles", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Entities.Models.School", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("SchoolSections");

                    b.Navigation("Shooras");

                    b.Navigation("campuses");
                });

            modelBuilder.Entity("Entities.Models.SchoolSection", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Entities.Models.Section", b =>
                {
                    b.Navigation("BookAllocations");

                    b.Navigation("SubjectAllocations");

                    b.Navigation("SubjectTeacherAllocations");
                });

            modelBuilder.Entity("Entities.Models.Shoora", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Heads");
                });

            modelBuilder.Entity("Entities.Models.SubDepartment", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Models.Subject", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("SubjectAllocations");
                });

            modelBuilder.Entity("Entities.Models.SubTopic", b =>
                {
                    b.Navigation("SubTopicAllocations");
                });

            modelBuilder.Entity("Entities.Models.TeachingMethodology", b =>
                {
                    b.Navigation("TopicAllocations");
                });

            modelBuilder.Entity("Entities.Models.Term", b =>
                {
                    b.Navigation("ChapterAllocations");

                    b.Navigation("Holidays");

                    b.Navigation("SubTopicAllocations");

                    b.Navigation("TopicAllocations");

                    b.Navigation("UnitAllocations");
                });

            modelBuilder.Entity("Entities.Models.Topic", b =>
                {
                    b.Navigation("SubTopicAllocations");

                    b.Navigation("SubTopics");

                    b.Navigation("TopicAllocations");
                });

            modelBuilder.Entity("Entities.Models.Unit", b =>
                {
                    b.Navigation("ChapterAllocations");

                    b.Navigation("Chapters");

                    b.Navigation("UnitAllocations");
                });

            modelBuilder.Entity("Entities.Models.Year", b =>
                {
                    b.Navigation("Terms");
                });
#pragma warning restore 612, 618
        }
    }
}
