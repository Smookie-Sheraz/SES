// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    [Migration("20230402090341_AcademicPlanningsforApproval")]
    partial class AcademicPlanningsforApproval
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.AcademicPlannings", b =>
                {
                    b.Property<int>("AcademicPlanningsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicPlanningsId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlanName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlannedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("AcademicPlanningsId")
                        .HasName("PK_AcademicPlanning");

                    b.ToTable("AcademicPlanning", (string)null);
                });

            modelBuilder.Entity("Entities.Models.ACPlanApproval", b =>
                {
                    b.Property<int>("ACPlanApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ACPlanApprovalId"), 1L, 1);

                    b.Property<bool?>("ACApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("CTApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("DAApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("DCApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("GMApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ACPlanApprovalId")
                        .HasName("PK_ACPlanApproval");

                    b.HasIndex("PlanId");

                    b.ToTable("ACPlanApproval", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsWorkBook")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceBook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceBookPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResourceNoteBookId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("BookId")
                        .HasName("PK_Book");

                    b.HasIndex("GradeId");

                    b.HasIndex("ResourceNoteBookId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Setup_Book", (string)null);
                });

            modelBuilder.Entity("Entities.Models.BookAllocation", b =>
                {
                    b.Property<int>("BookAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookAllocationId"), 1L, 1);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<bool>("preExist")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("BookAllocationId")
                        .HasName("PK_BookAllocation");

                    b.HasIndex("BookId");

                    b.HasIndex("SectionId");

                    b.ToTable("Setup_BookAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Campus", b =>
                {
                    b.Property<int>("CampusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampusId"), 1L, 1);

                    b.Property<string>("Abbrevation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CampusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrincipalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CampusId")
                        .HasName("PK_Campus");

                    b.HasIndex("SchoolId");

                    b.ToTable("Setup_Campus", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"), 1L, 1);

                    b.Property<string>("ChapterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("EndPage")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAllocated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("SLO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StartPage")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("ChapterId")
                        .HasName("PK_Chapter");

                    b.HasIndex("UnitId");

                    b.ToTable("Chapter", (string)null);
                });

            modelBuilder.Entity("Entities.Models.ChapterAllocation", b =>
                {
                    b.Property<int>("ChapterAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterAllocationId"), 1L, 1);

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TermId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookEndPage")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookStartPage")
                        .HasColumnType("int");

                    b.HasKey("ChapterAllocationId")
                        .HasName("PK_ChapterAllocation");

                    b.HasIndex("ChapterId");

                    b.HasIndex("PlanId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TermId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WorkBookId");

                    b.ToTable("ChapterAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.ChapterAnswers", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"), 1L, 1);

                    b.Property<string>("Choice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsTrue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("AnswerId")
                        .HasName("PK_ChapterAnswers");

                    b.HasIndex("QuestionId");

                    b.ToTable("ChapterAnswers", (string)null);
                });

            modelBuilder.Entity("Entities.Models.ChapterQuestions", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"), 1L, 1);

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId")
                        .HasName("PK_ChapterQuestions");

                    b.HasIndex("ChapterId");

                    b.ToTable("ChapterQuestions", (string)null);
                });

            modelBuilder.Entity("Entities.Models.CTPlanApproval", b =>
                {
                    b.Property<int>("CTPlanApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CTPlanApprovalId"), 1L, 1);

                    b.Property<bool?>("ACApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("CTApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("DAApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("DCApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("GMApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CTPlanApprovalId")
                        .HasName("PK_CTPlanApproval");

                    b.HasIndex("PlanId");

                    b.ToTable("CTPlanApproval", (string)null);
                });

            modelBuilder.Entity("Entities.Models.DAPlanApproval", b =>
                {
                    b.Property<int>("DAPlanApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DAPlanApprovalId"), 1L, 1);

                    b.Property<bool?>("ACApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("CTApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("DAApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("DCApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("GMApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DAPlanApprovalId")
                        .HasName("PK_DAPlanApproval");

                    b.HasIndex("PlanId");

                    b.ToTable("DAPlanApproval", (string)null);
                });

            modelBuilder.Entity("Entities.Models.DCPlanApproval", b =>
                {
                    b.Property<int>("DCPlanApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DCPlanApprovalId"), 1L, 1);

                    b.Property<bool?>("ACApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("CTApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("DAApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("DCApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("GMApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DCPlanApprovalId")
                        .HasName("PK_DCPlanApproval");

                    b.HasIndex("PlanId");

                    b.ToTable("DCPlanApproval", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentHeadId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ShortDescripiton")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId")
                        .HasName("PK_Department");

                    b.HasIndex("DepartmentHeadId");

                    b.ToTable("Setup_Department", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Designation", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesignationId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DesignationId")
                        .HasName("PK_Designation");

                    b.ToTable("Setup_Designation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CNICExpiryDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CNICIssueDate")
                        .HasColumnType("date");

                    b.Property<string>("CNICNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("date");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndofPeriodDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndofProbationDate")
                        .HasColumnType("date");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldOfSpecialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("date");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Period")
                        .HasColumnType("int");

                    b.Property<int?>("ProbationPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolSectionId")
                        .HasColumnType("int");

                    b.Property<string>("SpouseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartofPeriodDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartofProbationDate")
                        .HasColumnType("date");

                    b.Property<int?>("SubDepartmentHeadSubDepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("SubDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("UserImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId")
                        .HasName("PK_Employee");

                    b.HasIndex("CampusId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("GenderId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolSectionId");

                    b.HasIndex("SubDepartmentHeadSubDepartmentId");

                    b.HasIndex("SubDepartmentId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"), 1L, 1);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("WGender")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId")
                        .HasName("PK_Gender");

                    b.ToTable("Setup_Gender", (string)null);
                });

            modelBuilder.Entity("Entities.Models.GMPlanApproval", b =>
                {
                    b.Property<int>("GMPlanApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GMPlanApprovalId"), 1L, 1);

                    b.Property<bool?>("ACApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("CTApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("DAApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("DCApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("GMApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GMPlanApprovalId")
                        .HasName("PK_GMPlanApproval");

                    b.HasIndex("PlanId");

                    b.ToTable("GMPlanApproval", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<string>("GradeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GradeManagerId")
                        .HasColumnType("int");

                    b.Property<string>("GradeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("SchoolSectionId")
                        .HasColumnType("int");

                    b.HasKey("GradeId")
                        .HasName("PK_Grade");

                    b.HasIndex("GradeManagerId");

                    b.HasIndex("SchoolSectionId");

                    b.ToTable("Setup_Grade", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Head", b =>
                {
                    b.Property<int>("HeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HeadId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ShooraId")
                        .HasColumnType("int");

                    b.HasKey("HeadId")
                        .HasName("PK_Head");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShooraId");

                    b.ToTable("Setup_Head", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Holiday", b =>
                {
                    b.Property<int>("HolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HolidayId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("HolidayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NoOfHolidays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TermId")
                        .HasColumnType("int");

                    b.HasKey("HolidayId")
                        .HasName("PK_Holiday");

                    b.HasIndex("TermId");

                    b.ToTable("Holidays", (string)null);
                });

            modelBuilder.Entity("Entities.Models.LeaveApplication", b =>
                {
                    b.Property<int>("LeaveApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaveApplicationId"), 1L, 1);

                    b.Property<string>("ApplicationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("LeaveApplicationId")
                        .HasName("PK_LeaveApplication");

                    b.HasIndex("StudentId");

                    b.ToTable("LeaveApplication", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Parent", b =>
                {
                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdmissionEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CNIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DegreeQualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationInstituion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstContactAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstContactOfficeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstContactRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FourthContactAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FourthContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FourthContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FourthContactOfficeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FourthContactRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ITSNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InstituionEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("InstituionStartDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("MotherAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherAdmissionEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherCNIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherDegreeQualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherEducationInstituion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherEmployer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherFName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherFamilyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherITSNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MotherInstituionEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("MotherInstituionStartDate")
                        .HasColumnType("date");

                    b.Property<string>("MotherLName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherMaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherOfficeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherOfficeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherPassportNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MotherPassportValidity")
                        .HasColumnType("date");

                    b.Property<string>("MotherPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherPasswordRepeat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MotherRegistraionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MotherResidentCardNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherSecondAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherSecondEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherSecondMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MotherStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("MotherUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MotherVaccinationFirstDose")
                        .HasColumnType("date");

                    b.Property<DateTime?>("MotherVaccinationFourthDose")
                        .HasColumnType("date");

                    b.Property<DateTime?>("MotherVaccinationSecondDose")
                        .HasColumnType("date");

                    b.Property<DateTime?>("MotherVaccinationThirdDose")
                        .HasColumnType("date");

                    b.Property<string>("MotherVisaNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MotherVisaValidity")
                        .HasColumnType("date");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PassportValidity")
                        .HasColumnType("date");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistraionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResidentCardNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondContactAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondContactOfficeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondContactRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ThirdContactAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdContactOfficeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdContactRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VaccinationFirstDose")
                        .HasColumnType("date");

                    b.Property<DateTime?>("VaccinationFourthDose")
                        .HasColumnType("date");

                    b.Property<DateTime?>("VaccinationSecondDose")
                        .HasColumnType("date");

                    b.Property<DateTime?>("VaccinationThirdDose")
                        .HasColumnType("date");

                    b.Property<string>("VisaNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VisaValidity")
                        .HasColumnType("date");

                    b.HasKey("ParentId")
                        .HasName("PK_Parent");

                    b.ToTable("Parent", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Permissions", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("PermissionDbName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionId")
                        .HasName("PK_Permissions");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("Entities.Models.PlanApproval", b =>
                {
                    b.Property<int>("PlanApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanApprovalId"), 1L, 1);

                    b.Property<string>("ApprovingPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovingPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlanApprovalId")
                        .HasName("PK_PlanApproval");

                    b.HasIndex("BookId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanApproval", (string)null);
                });

            modelBuilder.Entity("Entities.Models.ResourceNoteBook", b =>
                {
                    b.Property<int>("ResourceNoteBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceNoteBookId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("NoteBookName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("ResourceNoteBookId")
                        .HasName("PK_ResourceNoteBook");

                    b.ToTable("ResourceNoteBook", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("RollName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId")
                        .HasName("PK_Role");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Entities.Models.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolId"), 1L, 1);

                    b.Property<string>("Abbrevation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegistrationNo")
                        .HasColumnType("int");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolId")
                        .HasName("PK_School");

                    b.ToTable("Setup_School", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SchoolLatter", b =>
                {
                    b.Property<int>("SchoolLatterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolLatterId"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Closing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("IssuingACId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salutation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SendingDate")
                        .HasColumnType("date");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("SchoolLatterId")
                        .HasName("PK_SchoolLatter");

                    b.HasIndex("IssuingACId");

                    b.HasIndex("ParentId");

                    b.HasIndex("StudentId");

                    b.ToTable("SchoolLatter", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SchoolNotice", b =>
                {
                    b.Property<int>("SchoolNoticeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolNoticeId"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BroadcastDate")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("IssuingACId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("Recipient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salutation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolNoticeId")
                        .HasName("PK_SchoolNotice");

                    b.HasIndex("IssuingACId");

                    b.ToTable("SchoolNotice", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SchoolSection", b =>
                {
                    b.Property<int>("SchoolSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolSectionId"), 1L, 1);

                    b.Property<string>("Abbrevation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("SectionHead")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolSectionId")
                        .HasName("PK_SchoolSection");

                    b.HasIndex("CampusId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Setup_SchoolSection", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"), 1L, 1);

                    b.Property<int?>("ClassTeacherId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SectionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionId")
                        .HasName("PK_Section");

                    b.HasIndex("ClassTeacherId");

                    b.HasIndex("GradeId");

                    b.ToTable("Setup_Section", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Shoora", b =>
                {
                    b.Property<int>("ShooraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShooraId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CNICExpiryDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CNICIssueDate")
                        .HasColumnType("date");

                    b.Property<string>("CNICNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CampdusId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("SpouseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShooraId")
                        .HasName("PK_Shoora");

                    b.HasIndex("CampdusId");

                    b.HasIndex("GenderId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Shoora", (string)null);
                });

            modelBuilder.Entity("Entities.Models.STPlanApproval", b =>
                {
                    b.Property<int>("STPlanApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("STPlanApprovalId"), 1L, 1);

                    b.Property<bool?>("ACApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<bool?>("CTApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("DAApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("DCApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool?>("GMApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TermId")
                        .HasColumnType("int");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("STPlanApprovalId")
                        .HasName("PK_STPlanApproval");

                    b.HasIndex("BookId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TermId");

                    b.HasIndex("YearId");

                    b.ToTable("STPlanApproval", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdmissionEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdmissionTestResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdmittedClassOrSection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdmittedSession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardMarksObtained")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardOrEnrollmentNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardOrUniversityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CNIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CandidateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CandidateNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CountryOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<string>("ElectricityBillNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraCurricularActivities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ITSNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IgnoreFeeDefaulterRestrictLogin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageSpken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("LoginFeeDefualterRestrictLogin")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModeOfTransport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OnlyRegisteredNoAdmitted")
                        .HasColumnType("bit");

                    b.Property<string>("PalceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PassportNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PassportValidity")
                        .HasColumnType("date");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistraionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResidentCardNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RestrictLogin")
                        .HasColumnType("bit");

                    b.Property<string>("RollNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScholarchipAmount")
                        .HasColumnType("int");

                    b.Property<string>("SeatNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("StudentRegistraionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaxPercentage")
                        .HasColumnType("int");

                    b.Property<string>("ToSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VaccinationFirstDose")
                        .HasColumnType("date");

                    b.Property<DateTime?>("VaccinationFourthDose")
                        .HasColumnType("date");

                    b.Property<DateTime?>("VaccinationSecondDose")
                        .HasColumnType("date");

                    b.Property<DateTime?>("VaccinationThirdDose")
                        .HasColumnType("date");

                    b.Property<DateTime?>("VisaValidity")
                        .HasColumnType("date");

                    b.Property<string>("WaterBillNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId")
                        .HasName("PK_Student");

                    b.HasIndex("ClassId");

                    b.HasIndex("ParentId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("Entities.Models.StudentAttendance", b =>
                {
                    b.Property<int>("StudentAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentAttendanceId"), 1L, 1);

                    b.Property<string>("AttendanceStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LateOrOnTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("On Time");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentAttendanceId")
                        .HasName("PK_StudentAttendance");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAttendance", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SubDepartment", b =>
                {
                    b.Property<int>("SubDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubDepartmentId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HeadId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("MainDepartmentId")
                        .HasColumnType("int");

                    b.HasKey("SubDepartmentId")
                        .HasName("PK_SubDepartment");

                    b.HasIndex("HeadId");

                    b.HasIndex("MainDepartmentId");

                    b.ToTable("Setup_SubDepartment", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId")
                        .HasName("PK_Subject");

                    b.ToTable("Setup_Subject", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SubjectAllocation", b =>
                {
                    b.Property<int>("SubjectAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectAllocationId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("SubjectAllocationId")
                        .HasName("PK_SubjectAllocation");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SubjectTeacherAllocation", b =>
                {
                    b.Property<int>("SubjectTeacherAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectTeacherAllocationId"), 1L, 1);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("SubjectTeacherAllocationId")
                        .HasName("PK_SubjectTeacherAllocation");

                    b.HasIndex("BookId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SectionId");

                    b.ToTable("SubjectTeacherAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SubTopic", b =>
                {
                    b.Property<int>("SubTopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubTopicId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("EndPage")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("StartPage")
                        .HasColumnType("int");

                    b.Property<string>("SubTopicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("SubTopicId")
                        .HasName("PK_SubTopic");

                    b.HasIndex("TopicId");

                    b.ToTable("SubTopic", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SubTopicAllocation", b =>
                {
                    b.Property<int>("SubTopicAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubTopicAllocationId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAllocated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("SubTopicId")
                        .HasColumnType("int");

                    b.Property<int?>("TermId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookEndPage")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookStartPage")
                        .HasColumnType("int");

                    b.HasKey("SubTopicAllocationId")
                        .HasName("PK_SubTopicAllocation");

                    b.HasIndex("PlanId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubTopicId");

                    b.HasIndex("TermId");

                    b.HasIndex("TopicId");

                    b.HasIndex("WorkBookId");

                    b.ToTable("SubTopicAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.TeachingMethodology", b =>
                {
                    b.Property<int>("TeachingMethodologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeachingMethodologyId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TMethodologyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeachingMethodologyId")
                        .HasName("PK_TeachingMethodology");

                    b.ToTable("TeachingMethodology", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Term", b =>
                {
                    b.Property<int>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TermId"), 1L, 1);

                    b.Property<int?>("AssesmentDays")
                        .HasColumnType("int");

                    b.Property<int?>("AssesmentWiseTermDays")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TermHolidays")
                        .HasColumnType("int");

                    b.Property<string>("TermName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalDays")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSatSun")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSchoolDays")
                        .HasColumnType("int");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("TermId")
                        .HasName("PK_Term");

                    b.HasIndex("YearId");

                    b.ToTable("Setup_Term", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"), 1L, 1);

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("EndPage")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("StartPage")
                        .HasColumnType("int");

                    b.Property<string>("TopicName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicId")
                        .HasName("PK_Topic");

                    b.HasIndex("ChapterId");

                    b.ToTable("Topic", (string)null);
                });

            modelBuilder.Entity("Entities.Models.TopicAllocation", b =>
                {
                    b.Property<int>("TopicAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicAllocationId"), 1L, 1);

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAllocated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("TMethodDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeachingMethodologyId")
                        .HasColumnType("int");

                    b.Property<int?>("TermId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookEndPage")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookStartPage")
                        .HasColumnType("int");

                    b.HasKey("TopicAllocationId")
                        .HasName("PK_TopicAllocation");

                    b.HasIndex("ChapterId");

                    b.HasIndex("PlanId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TeachingMethodologyId");

                    b.HasIndex("TermId");

                    b.HasIndex("TopicId");

                    b.HasIndex("WorkBookId");

                    b.ToTable("TopicAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"), 1L, 1);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("EndPage")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAllocated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("SLO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StartPage")
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitId")
                        .HasName("PK_Unit");

                    b.HasIndex("BookId");

                    b.ToTable("Unit", (string)null);
                });

            modelBuilder.Entity("Entities.Models.UnitAllocation", b =>
                {
                    b.Property<int>("UnitAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitAllocationId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TermId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookEndPage")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkBookStartPage")
                        .HasColumnType("int");

                    b.HasKey("UnitAllocationId")
                        .HasName("PK_UnitAllocation");

                    b.HasIndex("PlanId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TermId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WorkBookId");

                    b.ToTable("UnitAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId")
                        .HasName("PK_User");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Entities.Models.UserPermissions", b =>
                {
                    b.Property<int>("UserPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPermissionId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserPermissionId")
                        .HasName("PK_UserPermissions");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserPermissions", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Year", b =>
                {
                    b.Property<int>("YearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YearId"), 1L, 1);

                    b.Property<int?>("AssesmentDays")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("Holidays")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsLeapYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TotalAssesWiseSchoolDays")
                        .HasColumnType("int");

                    b.Property<int?>("TotalDays")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSatSundays")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSchoolDays")
                        .HasColumnType("int");

                    b.Property<string>("YearName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("YearId")
                        .HasName("PK_Year");

                    b.ToTable("Setup_Year", (string)null);
                });

            modelBuilder.Entity("Entities.Models.ACPlanApproval", b =>
                {
                    b.HasOne("Entities.Models.STPlanApproval", "Plan")
                        .WithMany("ACPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ACPlanApproval_STPlanId");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.HasOne("Entities.Models.Grade", "Grade")
                        .WithMany("Books")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Book_GradeId");

                    b.HasOne("Entities.Models.ResourceNoteBook", "ResourceNoteBook")
                        .WithMany("Books")
                        .HasForeignKey("ResourceNoteBookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Book_ResourceNoteBookId");

                    b.HasOne("Entities.Models.Subject", "Subject")
                        .WithMany("Books")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Book_SubjectId");

                    b.Navigation("Grade");

                    b.Navigation("ResourceNoteBook");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Entities.Models.BookAllocation", b =>
                {
                    b.HasOne("Entities.Models.Book", "Book")
                        .WithMany("BookAllocations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_BookAllocation_BookId");

                    b.HasOne("Entities.Models.Section", "Section")
                        .WithMany("BookAllocations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_BookAllocation_SectionId");

                    b.Navigation("Book");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Entities.Models.Campus", b =>
                {
                    b.HasOne("Entities.Models.School", "School")
                        .WithMany("campuses")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Campus_ShoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Entities.Models.Chapter", b =>
                {
                    b.HasOne("Entities.Models.Unit", "Unit")
                        .WithMany("Chapters")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Chapter_UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Entities.Models.ChapterAllocation", b =>
                {
                    b.HasOne("Entities.Models.Chapter", "Chapter")
                        .WithMany("ChapterAllocations")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ChapterAllocation_ChapterId");

                    b.HasOne("Entities.Models.AcademicPlannings", "Plan")
                        .WithMany("ChapterAllocations")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ChapterAllocation_PlanId");

                    b.HasOne("Entities.Models.Section", "Section")
                        .WithMany("ChapterAllocations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ChapterAllocation_SectionId");

                    b.HasOne("Entities.Models.Term", "Term")
                        .WithMany("ChapterAllocations")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ChapterAllocation_TermId");

                    b.HasOne("Entities.Models.Unit", "Unit")
                        .WithMany("ChapterAllocations")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ChapterAllocation_UnitId");

                    b.HasOne("Entities.Models.Book", "WorkBook")
                        .WithMany("ChapterAllocations")
                        .HasForeignKey("WorkBookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ChapterAllocation_WorkBookId");

                    b.Navigation("Chapter");

                    b.Navigation("Plan");

                    b.Navigation("Section");

                    b.Navigation("Term");

                    b.Navigation("Unit");

                    b.Navigation("WorkBook");
                });

            modelBuilder.Entity("Entities.Models.ChapterAnswers", b =>
                {
                    b.HasOne("Entities.Models.ChapterQuestions", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ChapterAnswers_QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Entities.Models.ChapterQuestions", b =>
                {
                    b.HasOne("Entities.Models.Chapter", "Chapter")
                        .WithMany("ChapterQuestions")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ChapterQuestions_ChapterId");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Entities.Models.CTPlanApproval", b =>
                {
                    b.HasOne("Entities.Models.STPlanApproval", "Plan")
                        .WithMany("CTPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_CTPlanApproval_CTPlanId");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Entities.Models.DAPlanApproval", b =>
                {
                    b.HasOne("Entities.Models.STPlanApproval", "Plan")
                        .WithMany("DAPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_DAPlanApproval_STPlanId");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Entities.Models.DCPlanApproval", b =>
                {
                    b.HasOne("Entities.Models.STPlanApproval", "Plan")
                        .WithMany("DCPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_DCPlanApproval_STPlanId");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Entities.Models.Department", b =>
                {
                    b.HasOne("Entities.Models.Shoora", "Shoora")
                        .WithMany("Departments")
                        .HasForeignKey("DepartmentHeadId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Department_ShooraId");

                    b.Navigation("Shoora");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.HasOne("Entities.Models.Campus", "Campus")
                        .WithMany("Employees")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_CampusId");

                    b.HasOne("Entities.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_DepartmentId");

                    b.HasOne("Entities.Models.Designation", "Designation")
                        .WithMany("Employees")
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_DesignationId");

                    b.HasOne("Entities.Models.Gender", "Gender")
                        .WithMany("Employees")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_GenderId");

                    b.HasOne("Entities.Models.Roles", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_RoleId");

                    b.HasOne("Entities.Models.School", "School")
                        .WithMany("Employees")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_SchoolId");

                    b.HasOne("Entities.Models.SchoolSection", "SchoolSection")
                        .WithMany("Employees")
                        .HasForeignKey("SchoolSectionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_SchoolSectionId");

                    b.HasOne("Entities.Models.SubDepartment", "SubDepartmentHead")
                        .WithMany()
                        .HasForeignKey("SubDepartmentHeadSubDepartmentId");

                    b.HasOne("Entities.Models.SubDepartment", "SubDepartment")
                        .WithMany("Employees")
                        .HasForeignKey("SubDepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_SubDepartmentId");

                    b.Navigation("Campus");

                    b.Navigation("Department");

                    b.Navigation("Designation");

                    b.Navigation("Gender");

                    b.Navigation("Role");

                    b.Navigation("School");

                    b.Navigation("SchoolSection");

                    b.Navigation("SubDepartment");

                    b.Navigation("SubDepartmentHead");
                });

            modelBuilder.Entity("Entities.Models.GMPlanApproval", b =>
                {
                    b.HasOne("Entities.Models.STPlanApproval", "Plan")
                        .WithMany("GMPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_GMPlanApproval_STPlanId");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Entities.Models.Grade", b =>
                {
                    b.HasOne("Entities.Models.Employee", "GradeManager")
                        .WithMany("Grades")
                        .HasForeignKey("GradeManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Grade_GradeManagerId");

                    b.HasOne("Entities.Models.SchoolSection", "SchoolSection")
                        .WithMany("Grades")
                        .HasForeignKey("SchoolSectionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Grade_SchoolSectionId");

                    b.Navigation("GradeManager");

                    b.Navigation("SchoolSection");
                });

            modelBuilder.Entity("Entities.Models.Head", b =>
                {
                    b.HasOne("Entities.Models.Employee", "Employee")
                        .WithMany("Heads")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Head_EmployeeId");

                    b.HasOne("Entities.Models.Shoora", "Shoora")
                        .WithMany("Heads")
                        .HasForeignKey("ShooraId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Head_ShooraId");

                    b.Navigation("Employee");

                    b.Navigation("Shoora");
                });

            modelBuilder.Entity("Entities.Models.Holiday", b =>
                {
                    b.HasOne("Entities.Models.Term", "Term")
                        .WithMany("Holidays")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Holidays_TermId");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Entities.Models.LeaveApplication", b =>
                {
                    b.HasOne("Entities.Models.Student", "Student")
                        .WithMany("LeaveApplications")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_LeaveApplication_StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Models.PlanApproval", b =>
                {
                    b.HasOne("Entities.Models.Book", "BookPlan")
                        .WithMany("Plans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_PlanApproval_BookId");

                    b.HasOne("Entities.Models.AcademicPlannings", "Plan")
                        .WithMany("PlanApprovals")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_PlanApproval_PlanId");

                    b.Navigation("BookPlan");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Entities.Models.SchoolLatter", b =>
                {
                    b.HasOne("Entities.Models.Employee", "IssuingAC")
                        .WithMany("SchoolLatters")
                        .HasForeignKey("IssuingACId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SchoolLetter_IssuingACId");

                    b.HasOne("Entities.Models.Parent", "Parent")
                        .WithMany("SchoolLatters")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SchoolLetter_ParentId");

                    b.HasOne("Entities.Models.Student", "Student")
                        .WithMany("SchoolLatters")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SchoolLetter_StudentId");

                    b.Navigation("IssuingAC");

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Models.SchoolNotice", b =>
                {
                    b.HasOne("Entities.Models.Employee", "IssuingAC")
                        .WithMany("SchoolNotices")
                        .HasForeignKey("IssuingACId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SchoolNotice_IssuingACId");

                    b.Navigation("IssuingAC");
                });

            modelBuilder.Entity("Entities.Models.SchoolSection", b =>
                {
                    b.HasOne("Entities.Models.Campus", "Campus")
                        .WithMany("sections")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SchoolSection_CampusId");

                    b.HasOne("Entities.Models.School", "School")
                        .WithMany("SchoolSections")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SchoolSection_SchoolId");

                    b.Navigation("Campus");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Entities.Models.Section", b =>
                {
                    b.HasOne("Entities.Models.Employee", "ClassTeacher")
                        .WithMany("Sections")
                        .HasForeignKey("ClassTeacherId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Section_ClassTeacherId");

                    b.HasOne("Entities.Models.Grade", "Grade")
                        .WithMany("Sections")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Section_GradeId");

                    b.Navigation("ClassTeacher");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("Entities.Models.Shoora", b =>
                {
                    b.HasOne("Entities.Models.Campus", "Campus")
                        .WithMany("Shooras")
                        .HasForeignKey("CampdusId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Shoora_CampusId");

                    b.HasOne("Entities.Models.Gender", "Gender")
                        .WithMany("Shooras")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Shoora_GenderId");

                    b.HasOne("Entities.Models.School", "School")
                        .WithMany("Shooras")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Shoora_SchoolId");

                    b.Navigation("Campus");

                    b.Navigation("Gender");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Entities.Models.STPlanApproval", b =>
                {
                    b.HasOne("Entities.Models.Book", "Book")
                        .WithMany("STPlans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_STPlanApproval_BookId");

                    b.HasOne("Entities.Models.Employee", "Employee")
                        .WithMany("STPlans")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_STPlanApproval_EmployeeId");

                    b.HasOne("Entities.Models.Section", "Section")
                        .WithMany("STPlans")
                        .HasForeignKey("SectionId");

                    b.HasOne("Entities.Models.Term", "Term")
                        .WithMany("STPlans")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_STPlanApproval_TermId");

                    b.HasOne("Entities.Models.Year", "Year")
                        .WithMany("STPlans")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_STPlanApproval_YearId");

                    b.Navigation("Book");

                    b.Navigation("Employee");

                    b.Navigation("Section");

                    b.Navigation("Term");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Entities.Models.Student", b =>
                {
                    b.HasOne("Entities.Models.Section", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Student_ClassId");

                    b.HasOne("Entities.Models.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Student_ParentId");

                    b.Navigation("Class");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Entities.Models.StudentAttendance", b =>
                {
                    b.HasOne("Entities.Models.Section", "Class")
                        .WithMany("StudentAttendances")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_StudentAttendance_ClassId");

                    b.HasOne("Entities.Models.Student", "Student")
                        .WithMany("StudentAttendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_StudentAttendance_StudentId");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Models.SubDepartment", b =>
                {
                    b.HasOne("Entities.Models.Head", "Head")
                        .WithMany("subDepartments")
                        .HasForeignKey("HeadId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubDepartment_HeadId");

                    b.HasOne("Entities.Models.Department", "MainDepartment")
                        .WithMany("SubDepartments")
                        .HasForeignKey("MainDepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Subdepartment_DepartmentId");

                    b.Navigation("Head");

                    b.Navigation("MainDepartment");
                });

            modelBuilder.Entity("Entities.Models.SubjectAllocation", b =>
                {
                    b.HasOne("Entities.Models.Section", "Section")
                        .WithMany("SubjectAllocations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubjectAllocation_SectionId");

                    b.HasOne("Entities.Models.Subject", "Subject")
                        .WithMany("SubjectAllocations")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubjectAllocation_SubjectId");

                    b.Navigation("Section");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Entities.Models.SubjectTeacherAllocation", b =>
                {
                    b.HasOne("Entities.Models.Book", "Book")
                        .WithMany("SubjectTeacherAllocations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubjectTeacherAllocation_BookId");

                    b.HasOne("Entities.Models.Employee", "Employee")
                        .WithMany("SubjectTeacherAllocations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubjectTeacherAllocation_EmployeeId");

                    b.HasOne("Entities.Models.Section", "Section")
                        .WithMany("SubjectTeacherAllocations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubjectTeacherAllocation_SectionId");

                    b.Navigation("Book");

                    b.Navigation("Employee");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Entities.Models.SubTopic", b =>
                {
                    b.HasOne("Entities.Models.Topic", "Topic")
                        .WithMany("SubTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubTopic_TopicId");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Entities.Models.SubTopicAllocation", b =>
                {
                    b.HasOne("Entities.Models.AcademicPlannings", "Plan")
                        .WithMany("SubTopicAllocations")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubTopicAllocation_PlanId");

                    b.HasOne("Entities.Models.Section", "Section")
                        .WithMany("SubTopicAllocations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubTopicAllocation_SectionId");

                    b.HasOne("Entities.Models.SubTopic", "SubTopic")
                        .WithMany("SubTopicAllocations")
                        .HasForeignKey("SubTopicId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubTopicAllocation_SubTopicId");

                    b.HasOne("Entities.Models.Term", "Term")
                        .WithMany("SubTopicAllocations")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubTopicAllocation_TermId");

                    b.HasOne("Entities.Models.Topic", "Topic")
                        .WithMany("SubTopicAllocations")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubTopicAllocation_TopicId");

                    b.HasOne("Entities.Models.Book", "WorkBook")
                        .WithMany("SubTopicAllocations")
                        .HasForeignKey("WorkBookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubTopicAllocation_WorkBookId");

                    b.Navigation("Plan");

                    b.Navigation("Section");

                    b.Navigation("SubTopic");

                    b.Navigation("Term");

                    b.Navigation("Topic");

                    b.Navigation("WorkBook");
                });

            modelBuilder.Entity("Entities.Models.Term", b =>
                {
                    b.HasOne("Entities.Models.Year", "Year")
                        .WithMany("Terms")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Term_YearId");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Entities.Models.Topic", b =>
                {
                    b.HasOne("Entities.Models.Chapter", "Chapter")
                        .WithMany("Topics")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Topic_ChapterId");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Entities.Models.TopicAllocation", b =>
                {
                    b.HasOne("Entities.Models.Chapter", "Chapter")
                        .WithMany("TopicAllocations")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TopicAllocation_ChapterId");

                    b.HasOne("Entities.Models.AcademicPlannings", "Plan")
                        .WithMany("TopicAllocations")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TopicAllocation_PlanId");

                    b.HasOne("Entities.Models.Section", "Section")
                        .WithMany("TopicAllocations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TopicAllocation_SectionId");

                    b.HasOne("Entities.Models.TeachingMethodology", "TeachingMethodology")
                        .WithMany("TopicAllocations")
                        .HasForeignKey("TeachingMethodologyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TopicAllocation_TeachingMethodologyId");

                    b.HasOne("Entities.Models.Term", "Term")
                        .WithMany("TopicAllocations")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TopicAllocation_TermId");

                    b.HasOne("Entities.Models.Topic", "Topic")
                        .WithMany("TopicAllocations")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TopicAllocation_TopicId");

                    b.HasOne("Entities.Models.Book", "WorkBook")
                        .WithMany("TopicAllocations")
                        .HasForeignKey("WorkBookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TopicAllocation_WorkBookId");

                    b.Navigation("Chapter");

                    b.Navigation("Plan");

                    b.Navigation("Section");

                    b.Navigation("TeachingMethodology");

                    b.Navigation("Term");

                    b.Navigation("Topic");

                    b.Navigation("WorkBook");
                });

            modelBuilder.Entity("Entities.Models.Unit", b =>
                {
                    b.HasOne("Entities.Models.Book", "Book")
                        .WithMany("Units")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Unit_BookId");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Entities.Models.UnitAllocation", b =>
                {
                    b.HasOne("Entities.Models.AcademicPlannings", "Plan")
                        .WithMany("UnitAllocations")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UnitAllocation_PlanId");

                    b.HasOne("Entities.Models.Section", "Section")
                        .WithMany("UnitAllocations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UnitAllocation_SectionId");

                    b.HasOne("Entities.Models.Term", "Term")
                        .WithMany("UnitAllocations")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UnitAllocation_TermId");

                    b.HasOne("Entities.Models.Unit", "Unit")
                        .WithMany("UnitAllocations")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UnitAllocation_UnitId");

                    b.HasOne("Entities.Models.Book", "WorkBook")
                        .WithMany("unitAllocations")
                        .HasForeignKey("WorkBookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UnitAllocation_WorkBookId");

                    b.Navigation("Plan");

                    b.Navigation("Section");

                    b.Navigation("Term");

                    b.Navigation("Unit");

                    b.Navigation("WorkBook");
                });

            modelBuilder.Entity("Entities.Models.UserPermissions", b =>
                {
                    b.HasOne("Entities.Models.Permissions", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserPermissions_PermissionId");

                    b.HasOne("Entities.Models.Roles", "Role")
                        .WithMany("UserPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserPermissions_RoleId");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entities.Models.AcademicPlannings", b =>
                {
                    b.Navigation("ChapterAllocations");

                    b.Navigation("PlanApprovals");

                    b.Navigation("SubTopicAllocations");

                    b.Navigation("TopicAllocations");

                    b.Navigation("UnitAllocations");
                });

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.Navigation("BookAllocations");

                    b.Navigation("ChapterAllocations");

                    b.Navigation("Plans");

                    b.Navigation("STPlans");

                    b.Navigation("SubTopicAllocations");

                    b.Navigation("SubjectTeacherAllocations");

                    b.Navigation("TopicAllocations");

                    b.Navigation("Units");

                    b.Navigation("unitAllocations");
                });

            modelBuilder.Entity("Entities.Models.Campus", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Shooras");

                    b.Navigation("sections");
                });

            modelBuilder.Entity("Entities.Models.Chapter", b =>
                {
                    b.Navigation("ChapterAllocations");

                    b.Navigation("ChapterQuestions");

                    b.Navigation("TopicAllocations");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Entities.Models.ChapterQuestions", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Entities.Models.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("SubDepartments");
                });

            modelBuilder.Entity("Entities.Models.Designation", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Heads");

                    b.Navigation("STPlans");

                    b.Navigation("SchoolLatters");

                    b.Navigation("SchoolNotices");

                    b.Navigation("Sections");

                    b.Navigation("SubjectTeacherAllocations");
                });

            modelBuilder.Entity("Entities.Models.Gender", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Shooras");
                });

            modelBuilder.Entity("Entities.Models.Grade", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Entities.Models.Head", b =>
                {
                    b.Navigation("subDepartments");
                });

            modelBuilder.Entity("Entities.Models.Parent", b =>
                {
                    b.Navigation("SchoolLatters");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Entities.Models.Permissions", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Entities.Models.ResourceNoteBook", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Entities.Models.Roles", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Entities.Models.School", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("SchoolSections");

                    b.Navigation("Shooras");

                    b.Navigation("campuses");
                });

            modelBuilder.Entity("Entities.Models.SchoolSection", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Entities.Models.Section", b =>
                {
                    b.Navigation("BookAllocations");

                    b.Navigation("ChapterAllocations");

                    b.Navigation("STPlans");

                    b.Navigation("StudentAttendances");

                    b.Navigation("Students");

                    b.Navigation("SubTopicAllocations");

                    b.Navigation("SubjectAllocations");

                    b.Navigation("SubjectTeacherAllocations");

                    b.Navigation("TopicAllocations");

                    b.Navigation("UnitAllocations");
                });

            modelBuilder.Entity("Entities.Models.Shoora", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Heads");
                });

            modelBuilder.Entity("Entities.Models.STPlanApproval", b =>
                {
                    b.Navigation("ACPlans");

                    b.Navigation("CTPlans");

                    b.Navigation("DAPlans");

                    b.Navigation("DCPlans");

                    b.Navigation("GMPlans");
                });

            modelBuilder.Entity("Entities.Models.Student", b =>
                {
                    b.Navigation("LeaveApplications");

                    b.Navigation("SchoolLatters");

                    b.Navigation("StudentAttendances");
                });

            modelBuilder.Entity("Entities.Models.SubDepartment", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Models.Subject", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("SubjectAllocations");
                });

            modelBuilder.Entity("Entities.Models.SubTopic", b =>
                {
                    b.Navigation("SubTopicAllocations");
                });

            modelBuilder.Entity("Entities.Models.TeachingMethodology", b =>
                {
                    b.Navigation("TopicAllocations");
                });

            modelBuilder.Entity("Entities.Models.Term", b =>
                {
                    b.Navigation("ChapterAllocations");

                    b.Navigation("Holidays");

                    b.Navigation("STPlans");

                    b.Navigation("SubTopicAllocations");

                    b.Navigation("TopicAllocations");

                    b.Navigation("UnitAllocations");
                });

            modelBuilder.Entity("Entities.Models.Topic", b =>
                {
                    b.Navigation("SubTopicAllocations");

                    b.Navigation("SubTopics");

                    b.Navigation("TopicAllocations");
                });

            modelBuilder.Entity("Entities.Models.Unit", b =>
                {
                    b.Navigation("ChapterAllocations");

                    b.Navigation("Chapters");

                    b.Navigation("UnitAllocations");
                });

            modelBuilder.Entity("Entities.Models.Year", b =>
                {
                    b.Navigation("STPlans");

                    b.Navigation("Terms");
                });
#pragma warning restore 612, 618
        }
    }
}
