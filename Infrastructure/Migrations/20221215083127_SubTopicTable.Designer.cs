// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    [Migration("20221215083127_SubTopicTable")]
    partial class SubTopicTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<string>("Author")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("BookCode")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BookName")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Publisher")
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("SubjectId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("BookId")
                        .HasName("PK_Book");

                    b.HasIndex("SubjectId");

                    b.ToTable("Setup_Book", (string)null);
                });

            modelBuilder.Entity("Entities.Models.BookAllocation", b =>
                {
                    b.Property<int>("BookAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookAllocationId"), 1L, 1);

                    b.Property<int?>("BookId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("SectionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("preExist")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("BookAllocationId")
                        .HasName("PK_BookAllocation");

                    b.HasIndex("BookId");

                    b.HasIndex("SectionId");

                    b.ToTable("Setup_BookAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("ChapterName")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("EndPage")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAllocated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("StartPage")
                        .HasColumnType("int");

                    b.HasKey("ChapterId")
                        .HasName("PK_Chapter");

                    b.HasIndex("BookId");

                    b.ToTable("Chapter", (string)null);
                });

            modelBuilder.Entity("Entities.Models.ChapterAllocation", b =>
                {
                    b.Property<int>("ChapterAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterAllocationId"), 1L, 1);

                    b.Property<int?>("ChapterId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("MonthId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ChapterAllocationId")
                        .HasName("PK_ChapterAllocation");

                    b.HasIndex("ChapterId");

                    b.HasIndex("MonthId");

                    b.ToTable("ChapterAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("DepartmentHeadId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ShortDescripiton")
                        .HasColumnType("varchar(500)");

                    b.HasKey("DepartmentId")
                        .HasName("PK_Department");

                    b.HasIndex("DepartmentHeadId");

                    b.ToTable("Setup_Department", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Designation", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesignationId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)");

                    b.HasKey("DesignationId")
                        .HasName("PK_Designation");

                    b.ToTable("Setup_Designation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("CNICExpiryDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CNICIssueDate")
                        .HasColumnType("date");

                    b.Property<string>("CNICNo")
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("date");

                    b.Property<int?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DesignationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("EmployeeType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndofPeriodDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndofProbationDate")
                        .HasColumnType("date");

                    b.Property<string>("FName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FatherName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FieldOfSpecialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("date");

                    b.Property<string>("LName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(11)");

                    b.Property<int?>("Period")
                        .HasColumnType("int");

                    b.Property<int?>("ProbationPeriod")
                        .HasColumnType("int");

                    b.Property<string>("SpouseName")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("StartofPeriodDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartofProbationDate")
                        .HasColumnType("date");

                    b.Property<int?>("SubDepartmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("EmployeeId")
                        .HasName("PK_Employee");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("GenderId");

                    b.HasIndex("SubDepartmentId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"), 1L, 1);

                    b.Property<string>("WGender")
                        .HasColumnType("varchar(15)");

                    b.HasKey("GenderId")
                        .HasName("PK_Gender");

                    b.ToTable("Setup_Gender", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<string>("GradeCode")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GradeName")
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("GradeId")
                        .HasName("PK_Grade");

                    b.ToTable("Setup_Grade", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Head", b =>
                {
                    b.Property<int>("HeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HeadId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ShooraId")
                        .HasColumnType("int");

                    b.HasKey("HeadId")
                        .HasName("PK_Head");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShooraId");

                    b.ToTable("Setup_Head", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Month", b =>
                {
                    b.Property<int>("MonthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MonthId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Event")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("date");

                    b.Property<int?>("Holidays")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalDays")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSatSundays")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSchoolDays")
                        .HasColumnType("int");

                    b.HasKey("MonthId")
                        .HasName("PK_Month");

                    b.HasIndex("TermId");

                    b.ToTable("Setup_Month", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("GradeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SectionCode")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SectionName")
                        .HasColumnType("varchar(200)");

                    b.HasKey("SectionId")
                        .HasName("PK_Section");

                    b.HasIndex("GradeId");

                    b.ToTable("Setup_Section", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Shoora", b =>
                {
                    b.Property<int>("ShooraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShooraId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("CNICExpiryDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CNICIssueDate")
                        .HasColumnType("date");

                    b.Property<string>("CNICNo")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FatherName")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(11)");

                    b.Property<string>("SpouseName")
                        .HasColumnType("varchar(100)");

                    b.HasKey("ShooraId")
                        .HasName("PK_Shoora");

                    b.HasIndex("GenderId");

                    b.ToTable("Shoora", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SubDepartment", b =>
                {
                    b.Property<int>("SubDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubDepartmentId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("HeadId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("MainDepartmentId")
                        .HasColumnType("int");

                    b.HasKey("SubDepartmentId")
                        .HasName("PK_SubDepartment");

                    b.HasIndex("HeadId")
                        .IsUnique()
                        .HasFilter("[HeadId] IS NOT NULL");

                    b.HasIndex("MainDepartmentId");

                    b.ToTable("Setup_SubDepartment", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SubjectCode")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectName")
                        .HasColumnType("varchar(200)");

                    b.HasKey("SubjectId")
                        .HasName("PK_Subject");

                    b.ToTable("Setup_Subject", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SubTopic", b =>
                {
                    b.Property<int>("SubTopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubTopicId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("EndPage")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("StartPage")
                        .HasColumnType("int");

                    b.Property<string>("SubTopicName")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("SubTopicId")
                        .HasName("PK_SubTopic");

                    b.HasIndex("TopicId");

                    b.ToTable("SubTopic", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Term", b =>
                {
                    b.Property<int>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TermId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("Holidays")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("TermName")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TotalDays")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSatSun")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSchoolDays")
                        .HasColumnType("int");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("TermId")
                        .HasName("PK_Term");

                    b.HasIndex("YearId");

                    b.ToTable("Setup_Term", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"), 1L, 1);

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("EndPage")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("StartPage")
                        .HasColumnType("int");

                    b.Property<string>("TopicName")
                        .HasColumnType("varchar(200)");

                    b.HasKey("TopicId")
                        .HasName("PK_Topic");

                    b.HasIndex("ChapterId");

                    b.ToTable("Topic", (string)null);
                });

            modelBuilder.Entity("Entities.Models.TopicAllocation", b =>
                {
                    b.Property<int>("TopicAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicAllocationId"), 1L, 1);

                    b.Property<int?>("ChapterId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<bool>("IsAllocated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("MonthId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("TopicDeliveryDate")
                        .HasColumnType("date");

                    b.Property<int?>("TopicId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("TopicAllocationId")
                        .HasName("PK_TopicAllocation");

                    b.HasIndex("ChapterId");

                    b.HasIndex("MonthId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicAllocation", (string)null);
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FatherName")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId")
                        .HasName("PK_User");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Year", b =>
                {
                    b.Property<int>("YearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YearId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedOn")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("Holidays")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsLeapYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TotalAssesWiseSchoolDays")
                        .HasColumnType("int");

                    b.Property<int?>("TotalDays")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSatSundays")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSchoolDays")
                        .HasColumnType("int");

                    b.Property<string>("YearName")
                        .HasColumnType("varchar(50)");

                    b.HasKey("YearId")
                        .HasName("PK_Year");

                    b.ToTable("Setup_Year", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.HasOne("Entities.Models.Subject", "Subject")
                        .WithMany("Books")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Book_SubjectId");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Entities.Models.BookAllocation", b =>
                {
                    b.HasOne("Entities.Models.Book", "Book")
                        .WithMany("BookAllocations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BookAllocation_BookId");

                    b.HasOne("Entities.Models.Section", "Section")
                        .WithMany("BookAllocations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BookAllocation_SectionId");

                    b.Navigation("Book");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Entities.Models.Chapter", b =>
                {
                    b.HasOne("Entities.Models.Book", "Book")
                        .WithMany("Chapters")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Chapter_BookId");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Entities.Models.ChapterAllocation", b =>
                {
                    b.HasOne("Entities.Models.Chapter", "Chapter")
                        .WithMany("ChapterAllocations")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChapterAllocation_ChapterId");

                    b.HasOne("Entities.Models.Month", "Month")
                        .WithMany("ChapterAllocations")
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChapterAllocation_MonthId");

                    b.Navigation("Chapter");

                    b.Navigation("Month");
                });

            modelBuilder.Entity("Entities.Models.Department", b =>
                {
                    b.HasOne("Entities.Models.Shoora", "Shoora")
                        .WithMany("Departments")
                        .HasForeignKey("DepartmentHeadId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Department_ShooraId");

                    b.Navigation("Shoora");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.HasOne("Entities.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Employee_DepartmentId");

                    b.HasOne("Entities.Models.Designation", "Designation")
                        .WithMany("Employees")
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_Employee_DesignationId");

                    b.HasOne("Entities.Models.Gender", "Gender")
                        .WithMany("Employees")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employee_GenderId");

                    b.HasOne("Entities.Models.SubDepartment", "SubDepartment")
                        .WithMany("Employees")
                        .HasForeignKey("SubDepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_Employee_SubDepartmentId");

                    b.Navigation("Department");

                    b.Navigation("Designation");

                    b.Navigation("Gender");

                    b.Navigation("SubDepartment");
                });

            modelBuilder.Entity("Entities.Models.Head", b =>
                {
                    b.HasOne("Entities.Models.Employee", "Employee")
                        .WithMany("Heads")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Head_EmployeeId");

                    b.HasOne("Entities.Models.Shoora", "Shoora")
                        .WithMany("Heads")
                        .HasForeignKey("ShooraId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Head_ShooraId");

                    b.Navigation("Employee");

                    b.Navigation("Shoora");
                });

            modelBuilder.Entity("Entities.Models.Month", b =>
                {
                    b.HasOne("Entities.Models.Term", "Term")
                        .WithMany("Months")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Month_TermId");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Entities.Models.Section", b =>
                {
                    b.HasOne("Entities.Models.Grade", "Grade")
                        .WithMany("Sections")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Section_GradeId");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("Entities.Models.Shoora", b =>
                {
                    b.HasOne("Entities.Models.Gender", "Gender")
                        .WithMany("Shooras")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Shoora_GenderId");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Entities.Models.SubDepartment", b =>
                {
                    b.HasOne("Entities.Models.Employee", "Head")
                        .WithOne("SubDepartmentHead")
                        .HasForeignKey("Entities.Models.SubDepartment", "HeadId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubDepartment_HeadId");

                    b.HasOne("Entities.Models.Department", "MainDepartment")
                        .WithMany("SubDepartments")
                        .HasForeignKey("MainDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Subdepartment_DepartmentId");

                    b.Navigation("Head");

                    b.Navigation("MainDepartment");
                });

            modelBuilder.Entity("Entities.Models.SubTopic", b =>
                {
                    b.HasOne("Entities.Models.Topic", "Topic")
                        .WithMany("SubTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_SubTopic_TopicId");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Entities.Models.Term", b =>
                {
                    b.HasOne("Entities.Models.Year", "Year")
                        .WithMany("Terms")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Term_YearId");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Entities.Models.Topic", b =>
                {
                    b.HasOne("Entities.Models.Chapter", "Chapter")
                        .WithMany("Topics")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Topic_ChapterId");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Entities.Models.TopicAllocation", b =>
                {
                    b.HasOne("Entities.Models.Chapter", "Chapter")
                        .WithMany("TopicAllocations")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TopicAllocation_ChapterId");

                    b.HasOne("Entities.Models.Month", "Month")
                        .WithMany("TopicAllocations")
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TopicAllocation_MonthId");

                    b.HasOne("Entities.Models.Topic", "Topic")
                        .WithMany("TopicAllocations")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TopicAllocation_TopicId");

                    b.Navigation("Chapter");

                    b.Navigation("Month");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.Navigation("BookAllocations");

                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("Entities.Models.Chapter", b =>
                {
                    b.Navigation("ChapterAllocations");

                    b.Navigation("TopicAllocations");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Entities.Models.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("SubDepartments");
                });

            modelBuilder.Entity("Entities.Models.Designation", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.Navigation("Heads");

                    b.Navigation("SubDepartmentHead");
                });

            modelBuilder.Entity("Entities.Models.Gender", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Shooras");
                });

            modelBuilder.Entity("Entities.Models.Grade", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Entities.Models.Month", b =>
                {
                    b.Navigation("ChapterAllocations");

                    b.Navigation("TopicAllocations");
                });

            modelBuilder.Entity("Entities.Models.Section", b =>
                {
                    b.Navigation("BookAllocations");
                });

            modelBuilder.Entity("Entities.Models.Shoora", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Heads");
                });

            modelBuilder.Entity("Entities.Models.SubDepartment", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Models.Subject", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Entities.Models.Term", b =>
                {
                    b.Navigation("Months");
                });

            modelBuilder.Entity("Entities.Models.Topic", b =>
                {
                    b.Navigation("SubTopics");

                    b.Navigation("TopicAllocations");
                });

            modelBuilder.Entity("Entities.Models.Year", b =>
                {
                    b.Navigation("Terms");
                });
#pragma warning restore 612, 618
        }
    }
}
